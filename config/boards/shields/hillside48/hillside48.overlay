/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <10>;
        rows = <4>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) 
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
RC(2,0) RC(2,1) RC(2,2) RC(2,3)         RC(2,5) RC(2,6) RC(2,7) RC(2,8) 
                                RC(3,4) RC(3,5) RC(3,6)
        >;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";
        wakeup-source;

        row-gpios
         = <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
         , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
         , <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
         , <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
         ;

                col-gpios
          = <&pro_micro 2 GPIO_ACTIVE_HIGH>
          , <&pro_micro 3 GPIO_ACTIVE_HIGH>
          , <&pro_micro 4 GPIO_ACTIVE_HIGH>
          , <&pro_micro 5 GPIO_ACTIVE_HIGH>
          , <&pro_micro 6 GPIO_ACTIVE_HIGH>
          , <&pro_micro 7 GPIO_ACTIVE_HIGH>
          , <&pro_micro 8 GPIO_ACTIVE_HIGH>
          , <&pro_micro 9 GPIO_ACTIVE_HIGH>
          , <&pro_micro 16 GPIO_ACTIVE_HIGH>
          , <&pro_micro 10 GPIO_ACTIVE_HIGH>
                        ;
        
          };

/*
 * PS/2 Mouse / Trackpoint
 */

// Configure the SCL and SDA pins of the PS/2 mouse/tp using the `&pro_micro`
// notation.
//
// If possible, try to choose the blue high frequency pins to avoid
// bluetooth interference.
//
// On the nice!nano documentation these are green DX pins:
// https://nicekeyboards.com/docs/nice-nano/pinout-schematic
//
#define MOUSE_PS2_PIN_SCL_PRO_MICRO <&pro_micro 1 GPIO_ACTIVE_HIGH>
#define MOUSE_PS2_PIN_SDA_PRO_MICRO <&pro_micro 0 GPIO_ACTIVE_HIGH>


// Uncomment and configure this pin if you have an extra free pin and want the
// controller to perform the Power-On-Reset sequence, which many trackpoints
// require, instead of using a trackpoint reset circuit.
//
// It's ok to use a low-frequency pin for this.
// #define MOUSE_PS2_PIN_RST_PRO_MICRO <&pro_micro 9 GPIO_ACTIVE_HIGH>


// Now configure the same SDA pin using the pinctrl notation.
//
// For that you have to use the PX.XX notation of the nrf52 chip.
//
// On the nice!nano pinout they are shown in blue and purple next to the green
// DX pin.
//
// Enter it like `X, Y` without leading zeroes.
// Examples:
// 		D0 - P0.08: 0, 8
//		D15 - P1.13: 1, 13
//
// We don't define the SCL pin, because UART uses a baud rate instead of
// a clock pin.
#define MOUSE_PS2_PIN_SDA_PINCTRL <NRF_PSEL(UART_RX, 0, 8)>


// In UART two different pins are used for receiving and transmitting, but PS/2
// uses the same pin for both.
//
// The UART config still requires both pins to be configured. So we use one of
// the nrf52 pins that are not exposed on the nice!nano board.
#define MOUSE_PS2_PIN_UNEXPOSED_TX <NRF_PSEL(UART_TX, 0, 27)>
#define MOUSE_PS2_PIN_UNEXPOSED_RX <NRF_PSEL(UART_RX, 0, 28)>


// The PS/2 GPIO driver
/ {
    gpio_ps2: gpio_ps2 {
		status = "disabled";
        compatible = "gpio-ps2";
        scl-gpios = MOUSE_PS2_PIN_SCL_PRO_MICRO;
        sda-gpios = MOUSE_PS2_PIN_SDA_PRO_MICRO;
    };
};


&pinctrl {
	// This pinctrl state is used for receiving
	// For `UART_TX`, set an unused and unexposed pin
	// For `UART_RX`, set the PS/2 SDA pin number
	uart0_ps2_default: uart0_ps2_default {
		group1 {
			psels = MOUSE_PS2_PIN_UNEXPOSED_TX,
					MOUSE_PS2_PIN_SDA_PINCTRL;
		};
	};

	// Set this to the same pins as uart0_ps2_default
	uart0_ps2_sleep: uart0_ps2_sleep {
		group1 {
			psels = MOUSE_PS2_PIN_UNEXPOSED_TX,
					MOUSE_PS2_PIN_SDA_PINCTRL;
			low-power-enable;
		};
	};

	// The nrf52 UART controller is not compatible with the PS/2
	// transmission frame. So we don't use UART for transmissions
	// and instead use GPIO bitbanging.
	//
	// When we switch to transmit mode, we free up the SDA pin by switching
	// UART to unexposed/unused pins.
	//
	// Then we can configure the pins to be used with the GPIO controller.
	uart0_ps2_off: uart0_ps2_off {
		group1 {
			psels = MOUSE_PS2_PIN_UNEXPOSED_TX,
					MOUSE_PS2_PIN_UNEXPOSED_RX;
		};
	};
};


&uart0 {
	status = "disabled";
	compatible = "nordic,nrf-uarte";

	// PS/2 uses a clock pin to syncronize data transmissions. UART on the
	// other hand uses a pre-defined frequency (baud rate).
	//
	// Fortunately, one of the available baud rates is very close to the
	// frequency used in IBM/Lenovo trackpoints.
	//
	// You can find other configurable baud rates here:
	// https://docs.zephyrproject.org/latest/build/dts/api/bindings/serial/nordic,nrf-uarte.html
	//
	// But most likely you won't need to adjust this.
	//
	// You can measure the frequency of your mouse/TP using a $5 logic
	// analyzer from AliExpress.
	//
	// Actual frequency of PS/2 trackpoint: 67us
	// Correspondent baud rate: 14,925
	//
	// Closest available baud rate in zephyr: 14,400
	// Correspondent cycle length: 69.44 microseconds
	//
	// Calculations:
	//
	// Convert cycle length in microseconds into baud:
	// 1 / PS2_CYCLE_LENGTH * 1000000 =  BAUD
	// 1 / 67 * 1000000 = 14,925 BAUD
	//
	// Convert baud into cycle length:
	// 1 / BAUD * 1000000 = CYCLE_LEN (in microseconds)
	// 1 / 14400 * 1000000 = 69.44
	//
	current-speed = <14400>;
	pinctrl-0 = <&uart0_ps2_default>;
	pinctrl-1 = <&uart0_ps2_off>;

	pinctrl-names = "default", "sleep";

    uart_ps2: uart_ps2 {
        status="disabled";
        compatible = "uart-ps2";
        scl-gpios = MOUSE_PS2_PIN_SCL_PRO_MICRO;
        sda-gpios = MOUSE_PS2_PIN_SDA_PRO_MICRO;
    };
};


/ {
    mouse_ps2: mouse_ps2 {
		status = "disabled";
        compatible = "zmk,input-mouse-ps2";

		// This will be overriden in your `xxx_right.overlay file`.
        // ps2-device = <&gpio_ps2>;
        ps2-device = <&uart_ps2>;

#ifdef MOUSE_PS2_PIN_RST_PRO_MICRO
        rst-gpios = MOUSE_PS2_PIN_RST_PRO_MICRO;
#endif
    };

    mouse_ps2_input_listener: mouse_ps2_input_listener {
        compatible = "zmk,input-listener-ps2";
	    status = "disabled";

        device = <&mouse_ps2>;

		// Some of the available settings depend on the keymap. So they
		// are adjusted in...
		// ../../../includes/trackpoint.dtsi
    };
};


#define MOUSE_PS2_DRIVER_UART

#ifdef MOUSE_PS2_DRIVER_UART
    &uart0 {
        status = "okay";
    };
    &uart_ps2 {
        status = "okay";
    };
#else
    &gpio_ps2 {
        status = "okay";
    };
#endif

&mouse_ps2 {
	status = "okay";

#ifdef MOUSE_PS2_DRIVER_UART
	ps2-device = <&uart_ps2>;
#else
	ps2-device = <&gpio_ps2>;
#endif
};

&mouse_ps2_input_listener {
    status = "okay";

    // Some of the available settings depend on the keymap. So they
    // are adjusted in...
    // ../../../includes/trackpoint.dtsi
};

// Adjust GPIO interrupt priority to the highest level.
//
// PS/2 events must be processed within 30-50us, but frequently bluetooth and
// other interrupts take longer to finish.
//
// Therefore we change the default GPIO priority to the highest level (0) and
// demote all BT interrupt priorities by one level using the kconfig settings:
// - CONFIG_BT_CTLR_LLL_PRIO 1
// - CONFIG_BT_CTLR_ULL_HIGH_PRIO 2
// - CONFIG_BT_CTLR_ULL_LOW_PRIOCONFIG 2
//
// These config options are enabled automatically by the PS2 UART and GPIO
// drivers... so you don't have to enable them manually.
//
// Then we lower the interrupt priority of all other devices by 2 levels using
// the devicetree config below.
//
// This allows the PS/2 interrupts to be triggered faster and reduces
// transmission errors.
//
// If you are using the nice_nano_v2 board, you can reuse my config below.
//
// Otherwise, you can generate the interrupt overrides using the following
// script in my zmk fork with the PS/2 mouse driver:
// app/scripts/gen_interrupt_priority_overrides.py
//
// Make sure to do it on a zephyr.dts where the interrupts have not been
// adjusted yet (i.e. a config that doesn't have the the following options
// enabled).
//
// If you are building using a toolchain you can find the zephyr.dts in the
// build directory, which by default is: `app/build/zephyr/zephyr.dts`
//
// If you are building using the github actions, copy the output of the build
// step `xxxx_right - nice_nano_v2 Devicetree file` into a file and run the
// script on it.

// gpiote should have the highest interrupt priority (0)
&gpiote {
    interrupts = < 6 0 >;
};

// All other priorities should be two levels lower than their defaults
// (which is usually 1 and should be demoted to 3)
&clock {
    interrupts = < 0 3 >;
};

&power {
    interrupts = < 0 3 >;
};

&radio {
    interrupts = < 1 3 >;
};

&uart0 {
    interrupts = < 2 3 >;
};

&i2c0 {
    interrupts = < 3 3 >;
};

&spi0 {
    interrupts = < 3 3 >;
};

&i2c1 {
    interrupts = < 4 3 >;
};

&spi1 {
    interrupts = < 4 3 >;
};

&nfct {
    interrupts = < 5 3 >;
};

&adc {
    interrupts = < 7 3 >;
};

&timer0 {
    interrupts = < 8 3 >;
};

&timer1 {
    interrupts = < 9 3 >;
};

&timer2 {
    interrupts = < 10 3 >;
};

&rtc0 {
    interrupts = < 11 3 >;
};

&temp {
    interrupts = < 12 3 >;
};

&rng {
    interrupts = < 13 3 >;
};

&ecb {
    interrupts = < 14 3 >;
};

&ccm {
    interrupts = < 15 3 >;
};

&wdt {
    interrupts = < 16 3 >;
};

&rtc1 {
    interrupts = < 17 3 >;
};

&qdec {
    interrupts = < 18 3 >;
};

&comp {
    interrupts = < 19 3 >;
};

&egu0 {
    interrupts = < 20 3 >;
};

&egu1 {
    interrupts = < 21 3 >;
};

&egu2 {
    interrupts = < 22 3 >;
};

&egu3 {
    interrupts = < 23 3 >;
};

&egu4 {
    interrupts = < 24 3 >;
};

&egu5 {
    interrupts = < 25 3 >;
};

&timer3 {
    interrupts = < 26 3 >;
};

&timer4 {
    interrupts = < 27 3 >;
};

&pwm0 {
    interrupts = < 28 3 >;
};

&pdm0 {
    interrupts = < 29 3 >;
};

&pwm1 {
    interrupts = < 33 3 >;
};

&pwm2 {
    interrupts = < 34 3 >;
};

&spi2 {
    interrupts = < 35 3 >;
};

&rtc2 {
    interrupts = < 36 3 >;
};

&i2s0 {
    interrupts = < 37 3 >;
};

&usbd {
    interrupts = < 39 3 >;
};

&uart1 {
    interrupts = < 40 3 >;
};

&qspi {
    interrupts = < 41 3 >;
};

&pwm3 {
    interrupts = < 45 3 >;
};

&spi3 {
    interrupts = < 47 3 >;
};

&cryptocell {
    interrupts = < 42 3 >;
};
