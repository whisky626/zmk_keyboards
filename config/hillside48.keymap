/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define MAC    1
#define PAD    2
#define NUM    3
#define ADJ    4
#define BT     5

/ {

        keymap {
                compatible = "zmk,keymap";

                default_layer {
/*  DEFAULT
 * ------------------------------------------------------------------------------------------------------------------------
 * |       |   W   |   C   |   F   |   B   |-----------------------------------|      P   |   L   |   U   |   Y   |       | 
 * |   A   |   R   |   S   |   T   |   G   |-----------------------------------|      M   |   N   |   E   |   I   |   O   | 
 * |   J   |   Z   |   Q   |   D   |       | ----------------------------------|          |   H   |   V   |   K   |   X   | 
 * ------------------------|  MO 4 |  MO 2 | ----------------------------------|SPACE/LT 1|  LSHIFT |----------------------
 */
                        bindings = <
 &none         &kp  W        &kp  C        &kp  F        &kp  B                         &kp  P        &kp  L        &kp  U        &kp  Y        &none      
 &kp  A        &kp  R        &kp  S        &kp  T        &kp  G                         &kp  M        &kp  N        &kp  E        &kp  I        &kp  O   
 &kp  J        &kp  Z        &kp  Q        &kp  D        &none                          &none         &kp  H        &kp  V        &kp  K        &kp  X
                                           &mo ADJ       &mo PAD                        &lt 1 SPACE   &kp  LSHIFT   
                  >;
		  };

                 mac_layer {
/* 1
 * ---------------------------------------------------------------------------------------------------------------------
 * |   {   |   }   |   [   |   ]   |   #   |-----------------------------------|   %   |   +   |   -   |   *   |   /   | 
 * |   (   |   )   |   ^   |   _   |   <   |-----------------------------------|   >   |   =   |   ,   |   .   |   :   | 
 * |   '   |   "   |   |   |   \   |   !   | ----------------------------------|   @   |   $   |   &   |   ;   |   ?   | 
 * ------------------------|       |       | ----------------------------------|       |       |------------------------
 */
                        bindings = <
 &kp LS(LBKT)   &kp LS(RBKT)     &kp LBKT         &kp  RBKT       &kp LS(N3)                &kp LS(N5)        &kp KP_PLUS       &kp KP_MINUS     &kp  KP_MULTIPLY   &kp  KP_DIVIDE       
 &kp LS(N9)     &kp LS(N0)       &kp LS(N6)       &kp LS(MINUS)   &kp LS(COMMA)             &kp LS(DOT)       &kp EQUAL         &kp  COMMA       &kp  DOT           &kp LS(SEMI) 
 &kp SQT        &kp LS(SQT)      &kp LS(BSLH)     &kp BSLH        &kp LS(N1)                &kp LS(N2)        &kp LS(N4)        &kp LS(N7)       &kp SEMI           &kp LS(FSLH) 
                                                  &none           &none                     &none             &none   
                  >;
		  };


                pad_layer {
/* 2
 * ---------------------------------------------------------------------------------------------------------------------
 * |   TAB   |      | LGUI |  LALT  |   ESC |-----------------------------------|  PGUP  |  HOME  | UP   |  END  |  DEL | 
 * |   MO 3  |      |      | LSHIFT | ENTER |-----------------------------------|  PGDN  |  LEFT  | DOWN | RIGHT | BSPC | 
 * |   TAB   |      |      |        |       | --------------------------------- |        |        |      |       | ENTER| 
 * ------------------------|        |       | ----------------------------------|        |        |----------------------
 */
                        bindings = <
 &kp  TAB        &none        &kp  LGUI        &kp  LALT        &kp  ESC            &kp  PG_UP        &kp  HOME        &kp  UP        &kp  END        &kp  DEL       
 &mo 3           &none        &none            &kp  LSHIFT      &kp  ENTER          &kp  PG_DN        &kp  LEFT        &kp  DOWN      &kp  RIGHT      &kp  BSPC   
 &kp  TAB        &none        &none            &none            &none               &none             &kp  LC(LEFT)    &none          &kp  LC(RIGHT)  &kp  ENTER 
                                               &none            &none               &none             &none   
                  >;
		  };

                 num_layer {
/* 3
 * ---------------------------------------------------------------------------------------------------------------------------
 * |       |   F1   |   F2   |   F3   |   F4   |-----------------------------------|       |   7   |   8   |   9   |   DEL   | 
 * |       |   F5   |   F6   |   F7   |   F8   |-----------------------------------|       |   4   |   5   |   6   |   BSPC  | 
 * |       |   F9   |   F10  |   F11  |   F12  | ----------------------------------|   0   |   1   |   2   |   3   |    .    | 
 * --------------------------|        |        | ----------------------------------|       |       |--------------------------
 */
                        bindings = <
 &none      &kp F1     &kp F2      &kp F3       &kp F4                                &kp LS(N5)    &kp  N7       &kp  N8     &kp  N9      &kp DEL       
 &none      &kp F5     &kp F6      &kp F7       &kp F8                                &none         &kp  N4       &kp  N5     &kp  N6      &kp  BSPC  
 &none      &kp F9     &kp F10     &kp F11      &kp F12                               &kp  N0       &kp  N1       &kp  N2     &kp  N3      &kp KP_DOT
                                   &none        &none                                 &none         &none        
                  >;
	          };

                 adj_layer {
/* 4
 * --------------------------------------------------------------------------------------------------------------------------
 * |LS(TAB) |  LC(X)  |  LC(C) |  LC(V) |  LC(FSLH) |-----------------------------------|     |     |      |      | NUMLOCK | 
 * |  LC(A) |  LC(S)  |  LA(A) |  LC(F) |  LA(S)    |-----------------------------------|     |     |      |      |         | 
 * |  LC(Z) |  LC(Y)  |        |        |  LG(L)    | ----------------------------------|     |     |      |      |         | 
 * ----------------------------|        |           | ----------------------------------|     | to 5|------------------------
 */
                        bindings = <  
 &kp LS(TAB)    &kp LC(X)     &kp LC(C)     &kp LC(V)    &kp LC(FSLH)                 &none      &none     &none       &none      &kp  KP_NUMLOCK            
 &kp LC(A)      &kp LC(S)     &kp LA(A)     &kp LC(F)    &kp LA(S)                    &none      &none     &none       &none      &none  
 &kp LC(Z)      &kp LC(Y)     &none         &none        &kp LG(L)                    &none      &none     &none       &none      &none
                                            &none        &none                        &none      &to BT                  
                    >;
	            };

     bt_layer {
/* bt
 * ---------------------------------------------------------------------------------------------------------------
 * |  BT0  |  BT1  |  BT2  |  BT3  |  BT4  |-----------------------------------|     |      |      |      |      | 
 * |       |       |       |       |       |-----------------------------------|     |      |      |      |      | 
 * |  boot | RESET | BT_CLR|       |  OUT  | ----------------------------------|     |      |      | RESET|  boot| 
 * ------------------------|       |       | ----------------------------------|     | TO 0 |---------------------
 */
                        bindings = <  
 &bt  BT_SEL 0    &bt  BT_SEL 1     &bt  BT_SEL 2     &bt  BT_SEL 3      &bt  BT_SEL 4            &none      &none     &none       &none        &none  
 &none            &none             &none             &none              &none                    &none      &none     &none       &none        &none  
 &bootloader      &sys_reset        &bt BT_CLR        &none              &out OUT_TOG             &none      &none     &none       &sys_reset   &bootloader
                                    &none             &none              &none                    &to DEFAULT                  
                    >;
	            };

                
        };


};
