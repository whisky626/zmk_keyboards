/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define MAC    1
#define PAD    2
#define NUM    3
#define ADJ    4

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
/* QWERTY
 * ------------------------------------------------------------------------------------------------------------------------------
 * | Q/TAB |   W   | E/ESC |   R   |   T   |-----------------------------------|   Y   | U/PGUP| I/INS |   O   |   P   | 
 * | A/CAPS|   S   | D/DEL |   F   |   G   |-----------------------------------| H/HOME| J/PGDN|   K   |   L   | ENTER | 
 * |   Z   |   X   |   C   |   V   |   B   | ----------------------------------|   N   |   M   |  ALT  |  WIN  | SHIFT | 
 * ------------------------|  CTRL | SPACE | ----------------------------------|  SPACE |  MO 3 |  mute |----------------
 */
                        bindings = <
 &qtab         &kp  W        &eesc         &kp  R        &kp  T                          &kp  Y        &upgup        &iins         &kp  O        &kp  P       
 &acaps        &kp  S        &ddel         &kp  F        &kp  G                          &hhome        &jpgdn        &kp  K        &kp  L        &kp  ENTER   
 &kp  Z        &kp  X        &kp  C        &kp  V        &kp  B                          &kp  N        &kp  M        &kp  RALT     &kp  RGUI     &kp  RSHFT 
                                           &kp LCTRL     &kp SPACE                       &kp SPACE      &mo NUM       &kp C_MUTE
                  >;
sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
		  };

                 mac_layer {
/* MAC
 * ------------------------------------------------------------------------------------------------------------------------------
 * | Q/TAB |   W   | E/ESC |   R   |   T   |-----------------------------------|   Y   | U/PGUP| I/INS |   O   |   P   | 
 * | A/CAPS|   S   | D/DEL |   F   |   G   |-----------------------------------| H/HOME| J/PGDN|   K   |   L   | ENTER | 
 * |   Z   |   X   |   C   |   V   |   B   | ----------------------------------|   N   |   M   |  ALT  |  WIN  | SHIFT | 
 * ------------------------|command| SPACE | ----------------------------------|  SPACE  |  MO 3 |  mute |---------------
 */
                        bindings = <
 &qtab         &kp  W        &eesc         &kp  R        &kp  T                          &kp  Y        &upgup        &iins         &kp  O        &kp  P       
 &acaps        &kp  S        &ddel         &kp  F        &kp  G                          &hhome        &jpgdn        &kp  K        &kp  L        &kp  ENTER   
 &kp  Z        &kp  X        &kp  C        &kp  V        &kp  B                          &kp  N        &kp  M        &kp  RALT     &kp  RGUI     &kp  RSHFT 
                                           &kp LCMD      &kp SPACE                       &kp SPACE      &mo NUM       &kp C_MUTE
                  >;
sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
		  };


                pad_layer {
/* PAD
 * ------------------------------------------------------------------------------------------------------------------------------
 * |   7   |   8   |   9   |  UNDO |  ESC  |-----------------------------------|       | PG_UP |  INS  |       |  DEL  | 
 * |   4   |   5   |   6   |  COPY | PASTE |-----------------------------------|  HOME | PG_DN |       |  lock | ENTER | 
 * |   1   |   2   |   3   |   .   |   0   | ----------------------------------|       |       |  ALT  |  WIN  | SHIFT | 
 * ------------------------|  CTRL | SPACE | ----------------------------------|  SPACE |  MO 3 |  mute |---------------
 */
                        bindings = <
 &kp  KP_N7        &kp  KP_N8        &kp  KP_N9       &kp  LC(Z)        &kp  ESC          &none       &kp  PG_UP  &kp  INS      &none                 &kp  DEL       
 &kp  KP_N4        &kp  KP_N5        &kp  KP_N6       &kp  LC(C)        &kp  LC(V)        &kp  HOME   &kp  PG_DN  &none         &kp KP_NUMLOCK        &kp  ENTER   
 &kp  KP_N1        &kp  KP_N2        &kp  KP_N3       &kp  KP_DOT       &kp  KP_N0        &none       &none       &kp  RALT     &kp  RGUI             &kp  RSHFT 
                                                      &kp  LCTRL        &kp SPACE         &kp SPACE    &mo NUM     &kp C_MUTE
                  >;
sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		  };

                 num_layer {
/* NUM
 * ------------------------------------------------------------------------------------------------------------------------------
 * |   1   |   2   |   3   |   4   |   5   |-----------------------------------|   6   |   7   |   8   |   9   |   0   | 
 * |   -   |   =   |   [   |   ]   |   \   |-----------------------------------|   `   |       |       |       |       | 
 * |   ;   |   '   |   ,   |   .   |   /   | ----------------------------------|  up   |  down |       |       |       | 
 * ----------------        |  CTRL |  TO 4 | ----------------------------------|  SPACE  |       |  mute |---------------
 */
                        bindings = <
 &kp  N1       &kp  N2       &kp  N3       &kp  N4       &kp  N5                              &kp  N6       &kp  N7       &kp  N8       &kp  N9       &kp N0       
 &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT      &kp BSLH                             &kp  GRAVE    &trans        &trans        &trans        &trans 
 &kp SEMI      &kp SQT       &kp COMMA     &kp DOT       &kp SLASH                            &kp  UP       &kp  DOWN     &trans        &trans        &trans 
                                           &trans        &to ADJ                              &trans        &trans        &kp C_MUTE
                  >;
sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
	          };

                 adj_layer {
/* ADJ
 * ------------------------------------------------------------------------------------------------------------------------------
 * |  BT0  |  BT1  |  BT2  |  BT3  |  BT4  |-----------------------------------| F1  |  F2  |  F3  |  F4  |  F5  | 
 * |       |       |       |       |       |-----------------------------------| F6  |  F7  |  F8  |  F9  |  F10 | 
 * |  boot | RESET |BT_CLR |       |  OUT  | ----------------------------------| F11 |  F12 |      | RESET|  boot| 
 * ----------------        |  TO 1 |  TO 0 | ----------------------------------| TO 2|      | mute |-----------------
 */
                        bindings = <  
 &bt  BT_SEL 0    &bt  BT_SEL 1     &bt  BT_SEL 2     &bt  BT_SEL 3      &bt  BT_SEL 4                   &kp  F1       &kp  F2       &kp  F3       &kp  F4       &kp  F5            
 &none            &none             &none             &none              &none                           &kp  F6       &kp  F7       &kp  F8       &kp  F9       &kp  F10  
 &bootloader      &sys_reset        &bt BT_CLR        &none              &out OUT_TOG                    &kp  F11      &kp  F12      &none         &sys_reset    &bootloader
                                                      &to MAC            &to DEFAULT                     &to PAD       &none         &kp C_MUTE         
                    >;
sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
	            };

                
        };

    behaviors {
     
        qtab: q_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp TAB>;
            mods = <(MOD_RSFT)>;
        };

        acaps: a_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp CAPS>;
            mods = <(MOD_RSFT)>;
        };

        ddel: d_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp DEL>;
            mods = <(MOD_RSFT)>;
        };

        iins: i_ins {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp INS>;
            mods = <(MOD_RSFT)>;
        };

        upgup: u_pgup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp U>, <&kp PG_UP>;
            mods = <(MOD_RSFT)>;
        };

        jpgdn: j_pgdn {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp PG_DN>;
            mods = <(MOD_RSFT)>;
        };

        hhome: h_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp H>, <&kp HOME>;
            mods = <(MOD_RSFT)>;
        };

        leftup: left_up {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp UP>;
            mods = <(MOD_RSFT)>;
        };

        eesc: e_esc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp ESC>;
            mods = <(MOD_RSFT)>;
        };

        rightdown: right_down {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp DOWN>;
            mods = <(MOD_RSFT)>;
        };
  

  };

combos {
        compatible = "zmk,combos";

        combo_tab {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
        };

        combo_caps {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp CAPS>;
        };

        combo_bspc {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp BSPC>;
        };

        combo_1 {
            timeout-ms = <50>;
            key-positions = <0 10>;
            bindings = <&kp N1>;
        };

        combo_2 {
            timeout-ms = <50>;
            key-positions = <1 11>;
            bindings = <&kp N2>;
        };

combo_3 {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&kp N3>;
        };

combo_4 {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp N4>;
        };

combo_5 {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&kp N5>;
        };

combo_6 {
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&kp N6>;
        };

combo_7 {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp N7>;
        };

combo_8 {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp N8>;
        };

combo_9 {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp N9>;
        };

combo_0 {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp N0>;
        };
   
    };

};
